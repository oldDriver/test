Было поставлено тестовое задание:
Напишите средствами PHP, Mysql, Javascript форму входа.регистрации нового пользователя.
придумайте самостоятельно необходимые поля. В результате заполнения формы пользователь должен предоставить информацию о себе.

Использование готовых скриптов и фрейворков не допускается.

По сути данного задания необходимы следующие страницы:
homepage - главная страница
registry - страницы регистрации
profile - после удачной регистрации пользователь будет залогинен и отправлен на страницу со своими данными
login - зарегистрированный пользователь пожет зайти на сайт
и следующие линки
logout - для выхода пользователя
culture - для установки языка

Данное тестовое задание можно было выполнить тремя способами:
1. Тупой. Написать страницы с использованием говнокода. Скорее всего, это был бы процедурный стиль.
2. Читерский. Использовать расширения PHP, например https://phalconphp.com/ru/. Вроде бы просто расширение.
3. Правильный. Написать небольшой фреймворк для данного тестового задания.

Я решил выбрать правильный путь.

Страница Регистрации.
Поговорим о полях:
поле "id" - это  primary key. Больше ничего добавлять не надо. 
поле "username" - поле для входа пользователя. Оно должно быть уникальным и, соответственно, индексированным
поле "email" - тоже уникальное поле, с индексом. Можно сделать, что пользователь будет входит либо на username либо по email

Остальные поля:
поле "firstname" - обязательно, varchar(255), вряд ли будут пользователи с очень длинными именами. Поле обязатльное. есть люди, которые используют только имя, как-то 
Далида и т.д.
поле "lastname" - необязательное
поле "password" - обязательно, без индексов
поле "salt" - обязательное, автогенерация
поля "createdAt" и "updatedAt" - поля создания и изменения пользователя.

Можно еще добавить поле "lastlogin", но это уже выходит за рамки задания.

Поговорим о возможных полях:
Адрес. Тут давно уже иcпользуется https://developers.google.com/maps/documentation/javascript/?hl=ru.
Это исключает ввод пользователем названий с ошибками и дает много плюшек.
Кроме того, пользователь может иметь несколько адресов, например постоянного проживания, частого посещения. То есть адреса лучше выносить в отдельную таблицу, создавая связь
с пользователет "один-ко-многим"
Телефоны. И тут не все так просто. каждый пользователь может иметь несколько телефонов, как личных, так и рабочих. Опять же, лучше строить таблицу телефононов и, с учетом рабочих,
эта связь может быть "многие-ко-многим"

Аналогичная ситуация и с местом работы, учебы. если делать правильно, то это не одна таблица и задача явно выходит за рамки тестового задания.

Будм надеятся, что я обосновал, почему использовал минимальное количество полей, только то, что можно хранить в одной таблице "user"

 CREATE TABLE `user` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(255) NOT NULL,
  `firstname` varchar(255) NOT NULL,
  `lastname` varchar(255) NOT NULL DEFAULT '',
  `email` varchar(255) NOT NULL,
  `password` varchar(255) NOT NULL,
  `salt` varchar(255) NOT NULL,
  `createdAt` datetime NOT NULL,
  `updatedAt` datetime NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `username_UNIQUE` (`username`),
  UNIQUE KEY `email_UNIQUE` (`email`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8

еще некоторые пояснения.
Чтобы избежать инъекция в базу, я решил использовать mysqli_stmt
Пусть и не совсем красиво, зато надежно.

Что касается пункта 9 пожеланий о дизайнерской части, скажу следующее: работая над такими проектами, как huffingtonpost.com,  renttrack.com заказчики хотели своего неповторимого дизайна.
Поэтому использование bootstrap.css было необосновано. 
Я не художник, по порезать страницу могу. Поэтому я не парился над утонченным дизайном тестовго задания - просто аккуратный и все.

Javascript тут не понадобился.